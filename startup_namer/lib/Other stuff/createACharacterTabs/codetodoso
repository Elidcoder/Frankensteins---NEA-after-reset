import 'package:flutter/material.dart';
import "package:frankenstein/globals.dart";
import "package:frankenstein/characterCreationGlobals.dart";
import "package:frankenstein/pages/createACharacterTabs/Basics.dart";
import "package:frankenstein/pages/createACharacterTabs/AbilityScores.dart";

Spell listgetter(String spellname) {
  //huge issue with adding content WITH DUPLICATE NAME AND (TYPE)
  for (int x = 0; x < list.length; x++) {
    if (list[x].name == spellname) {
      return list[x];
    }
  }
  //ADD SOMETHING FOR FAILED COMPARISONS
  ///fix really  really really
  return list[0];
} //}

class CreateACharacter extends StatefulWidget {
  @override
  MainCreateCharacter createState() => MainCreateCharacter();
}

//null op here to locate if called by editor (to edit char so will contain info) or otherwise
class MainCreateCharacter extends State<CreateACharacter> {
  @override
  initState() {
    // this is called when the class is initialized or called for the first time
    super.initState();
    optionalOnesStates = List.filled(
        initialRace.mystery1S + (subraceExample?.mystery1S ?? 0),
        [false, false, false, false, false, false]);
    for (int i = 0;
        i < initialRace.mystery1S + (subraceExample?.mystery1S ?? 0);
        i++) {
      optionalOnes.add(ToggleButtons(
        selectedColor: const Color.fromARGB(255, 0, 79, 206),
        color: Colors.blue,
        fillColor: const Color.fromARGB(162, 0, 255, 8),
        textStyle: const TextStyle(
          fontSize: 22,
          fontWeight: FontWeight.w700,
        ),
        borderColor: const Color.fromARGB(255, 7, 26, 239),
        borderRadius: BorderRadius.circular(20),
        borderWidth: 1.5,
        onPressed: (int index) {
          setState(() {
            if (optionalOnesStates![i][index]) {
              abilityScoreIncreases[index] -= 1;
            } else {
              abilityScoreIncreases[index] += 1;
              for (int buttonIndex = 0;
                  buttonIndex < optionalOnesStates![i].length;
                  buttonIndex++) {
                if (optionalOnesStates![i][buttonIndex]) {
                  optionalOnesStates![i][buttonIndex] = false;
                  abilityScoreIncreases[buttonIndex] -= 1;
                }
              }
            }
            optionalOnesStates![i][index] = !optionalOnesStates![i][index];
          });
        },
        isSelected: optionalOnesStates![i],
        children: const <Widget>[
          Text(" Strength "),
          Text(" Dexterity "),
          Text(" Constitution "),
          Text(" Intelligence "),
          Text(" Wisdom "),
          Text(" Charisma ")
        ],
      ));
    } //  this is the material super constructor for init state to link your instance initState to the global initState context
  }

  @override
  Widget build(BuildContext context) {
    //int z = 5;

    return DefaultTabController(
      length: 10,
      child: Scaffold(
        appBar: AppBar(
          title: const Center(
            child: Text(
              textAlign: TextAlign.center,
              'Create a character',
              style: TextStyle(
                  fontSize: 45,
                  fontWeight: FontWeight.w700,
                  color: Colors.white),
            ),
          ),
          bottom: const TabBar(
            tabs: [
              Tab(child: Text("Basics")),
              Tab(child: Text("Race")),
              Tab(child: Text("Class")),
              Tab(child: Text("Backround")),
              Tab(child: Text("Ability scores")),
              Tab(child: Text("Spells")),
              Tab(child: Text("Equipment")),
              Tab(child: Text("Boons and magic items")),
              Tab(child: Text("Backstory")),
              Tab(child: Text("Finishing up")),
            ],
          ),
        ),
        body: TabBarView(children: [
          //basics
          GetBasicsPage(),
          //race
          Column(
            children: [
              DropdownButton<String>(
                onChanged: (String? value) {
                  // This is called when the user selects an item.
                  setState(() {
                    //efficient this up at some point so ASI[i] isn't accessed twice
                    for (int i = 0; i < 6; i++) {
                      abilityScoreIncreases[i] -= (abilityScoreIncreases[i] +
                          ((subraceExample?.subRaceScoreIncrease[i]) ?? 0));
                    }

                    initialRace = RACELIST.singleWhere((x) => x.name == value);
                    subraceExample = initialRace.subRaces?.first;
                    for (int i = 0; i < 6; i++) {
                      abilityScoreIncreases[i] +=
                          initialRace.raceScoreIncrease[i] +
                              ((subraceExample?.subRaceScoreIncrease[i]) ?? 0);

                      optionalOnes = [];
                      optionalOnesStates = List.filled(
                          initialRace.mystery1S +
                              (subraceExample?.mystery1S ?? 0),
                          [false, false, false, false, false, false]);
                      for (int i = 0;
                          i <
                              initialRace.mystery1S +
                                  (subraceExample?.mystery1S ?? 0);
                          i++) {
                        optionalOnes.add(ToggleButtons(
                          selectedColor: const Color.fromARGB(255, 0, 79, 206),
                          color: Colors.blue,
                          fillColor: const Color.fromARGB(162, 0, 255, 8),
                          textStyle: const TextStyle(
                            fontSize: 22,
                            fontWeight: FontWeight.w700,
                          ),
                          borderColor: const Color.fromARGB(255, 7, 26, 239),
                          borderRadius: BorderRadius.circular(20),
                          borderWidth: 1.5,
                          onPressed: (int index) {
                            setState(() {
                              if (optionalOnesStates![i][index]) {
                                abilityScoreIncreases[index] -= 1;
                              } else {
                                abilityScoreIncreases[index] += 1;
                                for (int buttonIndex = 0;
                                    buttonIndex < optionalOnesStates![i].length;
                                    buttonIndex++) {
                                  if (optionalOnesStates![i][buttonIndex]) {
                                    optionalOnesStates![i][buttonIndex] = false;
                                    abilityScoreIncreases[buttonIndex] -= 1;
                                  }
                                }
                              }
                              optionalOnesStates![i][index] =
                                  !optionalOnesStates![i][index];
                            });
                          },
                          isSelected: optionalOnesStates![i],
                          children: const <Widget>[
                            Text(" Strength "),
                            Text(" Dexterity "),
                            Text(" Constitution "),
                            Text(" Intelligence "),
                            Text(" Wisdom "),
                            Text(" Charisma ")
                          ],
                        ));
                      }
                    }
                  });
                },
                value: initialRace.name,
                icon: const Icon(Icons.arrow_downward),
                items: RACELIST.map<DropdownMenuItem<String>>((Race value) {
                  return DropdownMenuItem<String>(
                    value: value.name,
                    child: Text(value.name),
                  );
                }).toList(),
                elevation: 2,
                style: const TextStyle(
                    color: Colors.blue, fontWeight: FontWeight.w700),
                underline: Container(
                  height: 1,
                  color: Colors.deepPurpleAccent,
                ),
              ),
              initialRace.subRaces != null
                  ? DropdownButton<String>(
                      onChanged: (String? value) {
                        // This is called when the user selects an item.
                        setState(() {
                          for (int i = 0; i < 6; i++) {
                            abilityScoreIncreases[i] -=
                                subraceExample?.subRaceScoreIncrease[i] ?? 0;
                          }
                          subraceExample = initialRace.subRaces
                              ?.singleWhere((x) => x.name == value);
                          for (int i = 0; i < 6; i++) {
                            abilityScoreIncreases[i] +=
                                subraceExample?.subRaceScoreIncrease[i] ?? 0;
                          }
                          optionalOnes = [];
                          optionalOnesStates = List.filled(
                              initialRace.mystery1S +
                                  (subraceExample?.mystery1S ?? 0),
                              [false, false, false, false, false, false]);
                          for (int i = 0;
                              i <
                                  initialRace.mystery1S +
                                      (subraceExample?.mystery1S ?? 0);
                              i++) {
                            optionalOnes.add(ToggleButtons(
                              selectedColor:
                                  const Color.fromARGB(255, 0, 79, 206),
                              color: Colors.blue,
                              fillColor: const Color.fromARGB(162, 0, 255, 8),
                              textStyle: const TextStyle(
                                fontSize: 22,
                                fontWeight: FontWeight.w700,
                              ),
                              borderColor:
                                  const Color.fromARGB(255, 7, 26, 239),
                              borderRadius: BorderRadius.circular(20),
                              borderWidth: 1.5,
                              onPressed: (int index) {
                                setState(() {
                                  if (optionalOnesStates![i][index]) {
                                    abilityScoreIncreases[index] -= 1;
                                  } else {
                                    abilityScoreIncreases[index] += 1;
                                    for (int buttonIndex = 0;
                                        buttonIndex <
                                            optionalOnesStates![i].length;
                                        buttonIndex++) {
                                      if (optionalOnesStates![i][buttonIndex]) {
                                        optionalOnesStates![i][buttonIndex] =
                                            false;
                                        abilityScoreIncreases[buttonIndex] -= 1;
                                      }
                                    }
                                  }
                                  optionalOnesStates![i][index] =
                                      !optionalOnesStates![i][index];
                                });
                              },
                              isSelected: optionalOnesStates![i],
                              children: const <Widget>[
                                Text(" Strength "),
                                Text(" Dexterity "),
                                Text(" Constitution "),
                                Text(" Intelligence "),
                                Text(" Wisdom "),
                                Text(" Charisma ")
                              ],
                            ));
                          }
                        });
                      },
                      value: subraceExample?.name,
                      icon: const Icon(Icons.arrow_downward),
                      items: initialRace.subRaces
                          ?.map<DropdownMenuItem<String>>((Subrace value) {
                        return DropdownMenuItem<String>(
                          value: value.name,
                          child: Text(value.name),
                        );
                      }).toList(),
                      elevation: 2,
                      style: const TextStyle(
                          color: Colors.blue, fontWeight: FontWeight.w700),
                      underline: Container(
                        height: 1,
                        color: Colors.deepPurpleAccent,
                      ),
                    )
                  : Container(
                      height: 50,
                      width: 50,
                      color: Colors.blue,
                      child: const Center(child: Text("No Subraces"))),
              //codebook
              ToggleButtons(
                selectedColor: const Color.fromARGB(255, 0, 79, 206),
                color: Colors.blue,
                fillColor: const Color.fromARGB(162, 0, 255, 8),
                textStyle: const TextStyle(
                  fontSize: 22,
                  fontWeight: FontWeight.w700,
                ),
                borderColor: const Color.fromARGB(255, 7, 26, 239),
                borderRadius: BorderRadius.circular(20),
                borderWidth: 1.5,
                onPressed: (int index) {
                  setState(() {
                    if (isSelected[index]) {
                      abilityScoreIncreases[index] -= 1;
                    } else {
                      abilityScoreIncreases[index] += 1;
                      for (int buttonIndex = 0;
                          buttonIndex < isSelected.length;
                          buttonIndex++) {
                        if (isSelected[buttonIndex]) {
                          isSelected[buttonIndex] = false;
                          abilityScoreIncreases[buttonIndex] -= 1;
                        }
                      }
                    }
                    isSelected[index] = !isSelected[index];
                  });
                },
                isSelected: isSelected,
                children: const <Widget>[
                  Text(" Strength "),
                  Text(" Dexterity "),
                  Text(" Constitution "),
                  Text(" Intelligence "),
                  Text(" Wisdom "),
                  Text(" Charisma ")
                ],
              ),
              Text("List: $optionalOnesStates"),
              Text("List: $isSelected")
            ],
          ),
          //class
          Column(children: [
            DropdownButton<String>(
              onChanged: (String? value) {
                // This is called when the user selects an item.
                setState(() {
                  spellExample = listgetter(value!);
                });
              },
              value: spellExample.name,
              icon: const Icon(Icons.arrow_downward),
              items: list.map<DropdownMenuItem<String>>((Spell value) {
                return DropdownMenuItem<String>(
                  value: value.name,
                  child: Text(value.name),
                );
              }).toList(),
              elevation: 2,
              style: const TextStyle(
                  color: Colors.blue, fontWeight: FontWeight.w700),
              underline: Container(
                height: 1,
                color: Colors.deepPurpleAccent,
              ),
            ),
            DropdownButton<String>(
              value: characterLevel,
              icon: const Icon(Icons.arrow_drop_down,
                  color: Color.fromARGB(255, 7, 26, 239)),
              elevation: 16,
              style: const TextStyle(
                  color: Colors.blue,
                  fontWeight: FontWeight.w800,
                  fontSize: 20),
              underline: Container(
                height: 2,
                color: const Color.fromARGB(255, 7, 26, 239),
              ),
              onChanged: (String? value) {
                // This is called when the user selects an item.
                setState(() {
                  characterLevel = value!;
                });
              },
              items: [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20"
              ].map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Center(child: Text(value)),
                );
              }).toList(),
            )
          ]),
          const Icon(Icons.directions_bike),
          //ability scores
          GetAbilityScorePage(),
          //spells
          Column(
            children: optionalOnes,
          ),
          const Icon(Icons.directions_transit),
          const Icon(Icons.directions_transit),
          const Icon(Icons.directions_bike),
          const Icon(Icons.directions_car),
        ]),
      ),
    );
  }
}
